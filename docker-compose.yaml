# Filename: docker-compose.yaml
version: '3.8'

# This section defines common settings for all Airflow services to avoid repetition.
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.1
  environment:
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER_AIRFLOW}:${POSTGRES_PASSWORD_AIRFLOW}@postgres-airflow:5432/${POSTGRES_DB_AIRFLOW}
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins

# This section defines common settings for Superset services.
x-superset-common:
  &superset-common
  image: apache/superset:2.1.0 # Pinned to a specific version
  build:
    context: .
    dockerfile: Dockerfile.superset
  environment:
    - SUPERSET_CONFIG_PATH=/app/superset_config.py
    - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
    - DB_HOST=postgres-superset
    - DB_PORT=5432
    - DB_USER=${POSTGRES_USER_SUPERSET}
    - DB_PASS=${POSTGRES_PASSWORD_SUPERSET}
    - DB_NAME=${POSTGRES_DB_SUPERSET}
  volumes:
    - ./superset_config.py:/app/superset_config.py # Mount the config file

services:
  # Airflow's metadata database
  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      - POSTGRES_USER=${POSTGRES_USER_AIRFLOW}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_AIRFLOW}
      - POSTGRES_DB=${POSTGRES_DB_AIRFLOW}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER_AIRFLOW}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # The data warehouse that your DAGs will write to and Superset will read from
  postgres-crypto-dw:
    image: postgres:13
    container_name: postgres-crypto-dw
    environment:
      - POSTGRES_USER=${POSTGRES_USER_CRYPTO}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_CRYPTO}
      - POSTGRES_DB=${POSTGRES_DB_CRYPTO}
    ports:
      - "5433:5432"
    volumes:
      - crypto_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER_CRYPTO}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # NEW: Superset's metadata database
  postgres-superset:
    image: postgres:13
    container_name: postgres-superset
    environment:
      - POSTGRES_USER=${POSTGRES_USER_SUPERSET}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_SUPERSET}
      - POSTGRES_DB=${POSTGRES_DB_SUPERSET}
    ports:
      - "5434:5432" # Use a different host port to avoid conflicts
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER_SUPERSET}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Airflow initialization service
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        pip install apache-airflow-providers-postgres pandas requests && \
        airflow db init && \
        airflow users create --role Admin --username admin --password ${AIRFLOW_ADMIN_PASSWORD} --email admin@example.com --firstname Admin --lastname User && \
        airflow connections add 'postgres_crypto_dw_conn' --conn-type 'postgres' --conn-host 'postgres-crypto-dw' --conn-login '${POSTGRES_USER_CRYPTO}' --conn-password '${POSTGRES_PASSWORD_CRYPTO}' --conn-schema '${POSTGRES_DB_CRYPTO}' --conn-port 5432
    depends_on:
      postgres-airflow:
        condition: service_healthy
      postgres-crypto-dw:
        condition: service_healthy

  # Airflow webserver service
  airflow-webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - "8080:8080"
    container_name: airflow_webserver
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow scheduler service
  airflow-scheduler:
    <<: *airflow-common
    command: airflow scheduler
    container_name: airflow_scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # NEW: Superset initialization service
  superset-init:
    <<: *superset-common # Use the common superset settings
    container_name: superset_init
    command: >
      bash -c "
        pip install psycopg2-binary && \
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password ${SUPERSET_ADMIN_PASSWORD} && \
        superset db upgrade && \
        superset init
      "
    depends_on:
      postgres-superset:
        condition: service_healthy

  # UPDATED: Superset webserver service
  superset:
    <<: *superset-common # Use the common superset settings
    container_name: superset
    command: superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
    ports:
      - "8088:8088"
    depends_on:
      superset-init:
        condition: service_completed_successfully # Wait for init to finish
      postgres-crypto-dw: # Also depends on the data source
        condition: service_healthy

volumes:
  crypto_data: {}